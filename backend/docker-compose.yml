services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lumi-backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public
      - REDIS_URL=redis://redis:${REDIS_PORT}
      - JAEGER_OTLP_ENDPOINT=http://jaeger:4318/v1/traces
      - OTEL_SERVICE_NAME=lumi-backend
      - OTEL_SERVICE_VERSION=1.0.0
      - PORT=${BACKEND_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - CORS_ENABLED=${CORS_ENABLED}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX}
      - PDF_DOWNLOAD_TIMEOUT=${PDF_DOWNLOAD_TIMEOUT}
      - PDF_MAX_SIZE=${PDF_MAX_SIZE}
      - PDF_CACHE_TTL=${PDF_CACHE_TTL}
      - LOG_LEVEL=${LOG_LEVEL}
      - OTEL_LOG_LEVEL=${OTEL_LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - CACHE_TTL=${CACHE_TTL}
      - CACHE_MAX_ITEMS=${CACHE_MAX_ITEMS}
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_USE_SSL=${MINIO_USE_SSL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lumi-network
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: lumi-minio
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - lumi-network
    restart: unless-stopped


  postgres:
    image: postgres:14-alpine
    container_name: lumi-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lumi-network

  redis:
    image: redis:6-alpine
    container_name: lumi-redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lumi-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: lumi-jaeger
    ports:
      - "${JAEGER_UI_PORT}:${JAEGER_UI_PORT}"
      - "4317:4317"
      - "4318:4318"
    environment:
      - LOG_LEVEL=${OTEL_LOG_LEVEL}
    networks:
      - lumi-network

networks:
  lumi-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
    name: lumi-minio-data